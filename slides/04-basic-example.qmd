## Kaplan-Meier Basics

- How do we calculate the Kaplan-Meier estimator?

- They look the same, right?

```{r}
sf1 <- survival::survfit(Surv(time, status) ~ surg, data = df_colon)
sf1
```


```{r}
sf2 <- ggsurvfit::survfit2(Surv(time, status) ~ surg, data = df_colon)
sf2
```


## Kaplan-Meier Basics

::: {.small}

What is the difference?

- `ggsurvfit::survfit2()` tracks the environment from which the call was made

- Accurately reconstruct or parse call at any point post estimation

- Call is parsed when p-values are reported and when labels are created

- Most functions in the package work with both `survfit2()` and `survfit()`; however, the output will be styled in a preferable format with `survfit2()`.

:::

```{r}
waldo::compare(sf1, sf2)
```

## Basic Example

```{r}
#| echo: false
#| message: false
library(ggsurvfit)
```

::: columns
::: {.column width="80%"}

```{r}
survfit2(Surv(time, status) ~ surg, data = df_colon) |> 
  ggsurvfit() +
  add_risktable()
```

:::
::: {.column width="20%"}
::: {.smaller}
::: {.incremental}

* **The Good**
  - Simple code and figure is nearly publishable
  - Risk table with both no. at risk and events easily added
  - x-axis label taken from the `time` column label
  - Can use **ggplot2** `+` notation

  
* **The Could-Be-Better**
  - y-axis label is incorrect, and the range of axis is best at 0-100%
  - Axis padding a bit more than I prefer for a KM figure
  - x-axis typically has more tick marks for KM figure

:::
:::
:::
:::

## Basic Example

::: columns
::: {.column width="80%"}
```{r}
#| code-line-numbers: "4-5"
survfit2(Surv(time, status) ~ surg, data = df_colon) |> 
  ggsurvfit() +
  add_risktable() +
  scale_ggsurvfit() +
  labs(y = "Recurrence-free Progression")
```

:::
::: {.column width="20%"}
::: {.smaller}
::: {.incremental}

* Padding has been reduced and curves begin in the upper left corner of plot

* x-axis reports additional time points (and as a result, the risk table as well)

* We updated the y-axis label weaving standard **ggplot2** functions

:::
:::
:::
:::


## Basic Example

::: columns
::: {.column width="80%"}
```{r}
#| code-line-numbers: "6"
survfit2(Surv(time, status) ~ surg, data = df_colon) |> 
  ggsurvfit() +
  add_risktable() +
  scale_ggsurvfit() +
  labs(y = "Recurrence-free Progression") +
  ggeasy::easy_move_legend("top")
```

:::
::: {.column width="20%"}
::: {.smaller}

* Padding has been reduced and curves begin in the upper left corner of plot

* x-axis reports additional time points (and as a result, the risk table as well)

* We updated the y-axis label weaving standard **ggplot2** functions

* We can even use ggplot2-extender functions

:::
:::
:::

## Basic Example, transformation

```{r}
survfit2(Surv(time, status) ~ surg, data = df_colon) |> 
  ggsurvfit(type = "risk", linewidth = 1) +
  add_risktable() +
  scale_ggsurvfit() +
  labs(y = "Recurrence-free Progression") 
```

## Basic Example

- What is `scale_ggsurvfit()`?

```r
scale_y_continuous(expand = c(0.025, 0), limits = c(0, 1), label = scales::label_percent())
scale_x_continuous(expand = c(0.015, 0), n.breaks = 8)
```

- If you use this function, you **must include all scale specifications** that would appear in `scale_x_continuous()` or `scale_y_continuous()`

- Do not call `scale_x_continuous()` or `scale_y_continuous()` along with `scale_ggsurvfit()`: scales are not additive, rather they replace existing scales. 

- For example, it's common you'll need to specify the x-axis break points. `scale_ggsurvfit(x_scales=list(breaks=0:9))`

::: {.notes}
- You'll see that I am using `scale_ggsurvfit()` pretty often throughout the presentation.

- This is the value for survival figures.

- The scales are modified depending on what type of curve is being presented.
:::
